apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: msmapper-notebook
spec:
  entrypoint: msmapper-notebook
  arguments:
    parameters:
      - name: visitdir
        valueFrom:
          configMapKeyRef:
            name: sessionspaces
            key: data_directory
      - name: inpath
        value: ""
      - name: outpath
        value: ""
      - name: step
        value: "[0.002]"
  volumes:
    - name: session
      hostPath:
        path: "{{`{{ workflow.parameters.visitdir }}`}}"
        type: Directory
  volumeClaimTemplates:
    - metadata:
        name: tmp
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: local-path
    - metadata:
        name: tmpdir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
        storageClassName: local-path

  templates:
    - name: mount-files
      script:
        image: ghcr.io/diamondlightsource/magnetic-materials-workflows:0.2.0-rc1
        command: [bash]
        source: |
          echo '{{ .Files.Get "notebooks/msmapper_notebook.ipynb" | b64enc }}' | base64 -d > /tmp/notebook.ipynb
        volumeMounts:
          - name: tmp
            mountPath: /tmp
    - name: convert-notebook
      script:
        image: ghcr.io/diamondlightsource/magnetic-materials-workflows:0.2.0-rc1
        command: [bash]
        source: |
          # create matplotlib config dir
          mkdir -p /tmp/mpl
          export MPLCONFIGDIR=/tmp/mpl
          # install mmg_toolbox from github repo
          mkdir -p /tmp/packages
          export PYTHONPATH=/tmp/packages
          python -m pip install -t /tmp/packages --upgrade --no-cache-dir git+https://github.com/DiamondLightSource/i16_msmapper.git
          # run notebook
          python -m papermill /tmp/notebook.ipynb /tmp/notebook.ipynb \
            -p datadir "{{`{{ workflow.parameters.visitdir }}`}}" \
            -p inpath "{{`{{ workflow.parameters.inpath }}`}}" \
            -p outpath "{{`{{ workflow.parameters.outpath }}`}}" \
            -p step "{{`{{ workflow.parameters.step }}`}}"
          python -m nbconvert --execute --allow-errors --to html --output notebook --output-dir /tmp /tmp/notebook.ipynb
        volumeMounts:
          - name: tmp
            mountPath: /tmp
          - name: session
            mountPath: "{{`{{ workflow.parameters.visitdir }}`}}"
      outputs:
        artifacts:
          - name: notebook
            path: /tmp/notebook.html
            archive:
              none: {}
          - name: image
            path: /tmp/msmapper_result.png
            archive:
              none: {}
    - name: msmapper-notebook
      dag:
        tasks:
          - name: mount-files
            template: mount-files
          - name: convert-notebook
            template: convert-notebook
            dependencies: [mount-files]
